
; semicolons are comments
; all of this is data
; sequences of numbers are numbers
; all sequences of alphanumeric characters are strings
; strings containing whitespace should be wrapped in quotes
; (or for "emphasis")


(interface Fnord
	(float ElapsedTime))


(struct SomeType
	(mat4 Whatever)
	(float Etc))


(interface Whatsit
	(SomeType Moop))


(sampler SomeSampler
	(min_filter GL_NEAREST)
	(mag_filter GL_NEAREST))


(texture2d BgImage
	(format RGBA8) ; This should probably just be the format enum that we'd pass into glTextureStorage2D?
	(use SomeSampler))


(pipeline TextureTest
	(vs "shaders/splat.vs.glsl")
	(fs "shaders/texture.fs.glsl")
	(use Fnord)
	(use BgImage)
	(disable GL_DEPTH_TEST)
	(disable GL_CULL_FACE))


(pipeline SplatRed
	(vs "shaders/splat.vs.glsl")
	(fs "shaders/red.fs.glsl")
	(use SomeType)
	(use Fnord)
	(use Whatsit)
	(disable GL_DEPTH_TEST)
	(disable GL_CULL_FACE))


(pipeline SplatBlue
	(copy SplatRed)
	(fs "shaders/blue.fs.glsl"))


(handle SomeHandle Fnord)


(handle YourTextureHere BgImage)


(preload YourTextureHere "test_texture.png")


(renderer Blue
	(update SomeHandle)
	(draw SplatBlue
		(bind SomeHandle)))


(renderer Red
	(update SomeHandle)
	(draw SplatRed
		(bind SomeHandle)))


(renderer TextureTest
	(update SomeHandle)
	(draw TextureTest
		(bind SomeHandle)
		(bind YourTextureHere)))


; NOTE FOR LATER REVISION:
; Texture definitions here aren't really type definitions like structs are.
; For example, BgImage can only ever be used once in a given pipeline construction,
; so if you wanted to have another image w/ the same parameters, you'll have to copy
; and paste the definition.  Basically, this has a 1:1 mapping to a texture handle,
; which means I totally inverted what I intended to do here D:

; maybe it would be better to do this:
;
;	(format TextureFormat GL_TEXTURE_2D GL_RGBA8)
;
;	(struct SomeType
;		(mat4 Whatever)
;		(float Etc))
;
;	(struct FnordType
;		(float ElapsedTime))
;
;	(pipeline SomeDrawPass
;		...
;		(use SomeType)
;		(interface Beep FnordType)
;		(interface Boop TextureFormat))
;
;	(buffer SomeBuffer Fnord)
;
;	(sampler SamplerName
;		(min-filter GL_NEAREST)
;		(mag-filter GL_NEAREST))
;
;	(texture TextureName TextureFormat
;		; mips, size, etc
;		(loadfrom "fnordpng"))
;
;	(renderer RenderSomeDrawPass
;		(update SomeBuffer)
;		(draw SomeDrawPass
;			(bind-buffer Beep SomeBuffer)
;			(bind-texture TextureName SamplerName)))

; So in this version, we have type-ish definitions ("format" and "struct"),
; data-ish definitions ("buffer", "sampler", and "texture"), and code-ish
; definitions ("pipeline" and "renderer").




